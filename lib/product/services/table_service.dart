import 'dart:convert';
import 'package:foomoons/product/init/config/app_environment.dart';
import 'package:foomoons/product/model/area.dart';
import 'package:foomoons/product/model/menu.dart';
import 'package:foomoons/product/model/table.dart';
import 'package:foomoons/product/services/auth_service.dart';
import 'package:http/http.dart' as http;
import 'package:uuid/uuid.dart';

class UpdateAreaResult {
  final bool success;
  final Area? data;
  final List<CoffeTable>? updatedTables;

  UpdateAreaResult({
    required this.success,
    this.data,
    this.updatedTables,
  });
}

class TableService {
  final String baseUrl = AppEnvironmentItems.baseUrl.value;
  final AuthService _authService;

  TableService({required AuthService authService}) : _authService = authService;

  Future<List<CoffeTable>> fetchTables() async {
    try {
      final businessId = await _authService.getValidatedBusinessId();
      final response = await http.get(
        Uri.parse('$baseUrl/Tables/getbybusinessid?id=$businessId'),
        headers: {'accept': '*/*'},
      );
      if (response.statusCode == 200) {
        final Map<String, dynamic> data = json.decode(response.body);
        final List<dynamic> tableList = data['data'];
        final tables =
            tableList.map((json) => CoffeTable.fromJson(json)).toList();
        tables.sort((a, b) =>
            int.tryParse(a.tableTitle!.split(' ').last)?.compareTo(
              int.tryParse(b.tableTitle!.split(' ').last) ?? 0,
            ) ??
            0);
        return tables;
      } else {
        throw Exception(
            'Masalarƒ± getirirken hata olu≈ütu: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Masalarƒ± getirirken hata olu≈ütu: $e');
    }
  }

  Future<CoffeTable> addTable(CoffeTable table) async {
    try {
      final businessId = await _authService.getValidatedBusinessId();
      
      // 1. √ñnce masayƒ± bo≈ü QR URL ile ekle
      final url = Uri.parse('$baseUrl/tables/add');
      final body = jsonEncode({
        'area': table.area,
        'qrUrl': '', // Bo≈ü QR URL ile ba≈üla
        'tableTitle': table.tableTitle,
        'businessId': businessId,
      });
      
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
        },
        body: body,
      );
      
      final responseData = jsonDecode(response.body);
      final addedTable = CoffeTable.fromJson(responseData['data']);
      
      // 2. Eklenen masanƒ±n ID'si ile QR URL olu≈ütur
      final qrUrl = await generateQRUrl(addedTable.id.toString());
      
      // 3. Masayƒ± QR URL ile g√ºncelle
      final updateUrl = Uri.parse('$baseUrl/tables/update');
      final updateBody = jsonEncode({
        'id': addedTable.id,
        'area': addedTable.area,
        'qrUrl': qrUrl,
        'tableTitle': addedTable.tableTitle,
        'businessId': businessId,
      });
      
      final updateResponse = await http.post(
        updateUrl,
        headers: {
          'Content-Type': 'application/json',
        },
        body: updateBody,
      );
      
      final updatedData = jsonDecode(updateResponse.body);
      final updatedTable = CoffeTable.fromJson(updatedData['data']);
      
      print('‚úÖ Masa ba≈üarƒ±yla eklendi: ${updatedTable.tableTitle}');
      return updatedTable;
    } catch (e) {
      throw Exception('Masa eklerken hata olu≈ütu: $e');
    }
  }

  // QR URL olu≈üturmak i√ßin yardƒ±mcƒ± metod
  Future<String> generateQRUrl(String tableId) async {
    try {
      final businessId = await _authService.getBusinessId();
      // businessId ve tableId'yi ≈üifreliyoruz
      final String token = base64Encode(utf8.encode('businessId:$businessId,tableId:$tableId'));

      final Uri menuUrl = Uri(
        scheme: 'http',
        host: 'foomoons.com',
        path: '/menu/',
      );
      final String finalUrl = '$menuUrl#/?token=$token';
      print('‚úÖ QR URL olu≈üturuldu: $finalUrl');
      return finalUrl;
    } catch (e) {
      print('‚ùå QR URL olu≈üturma hatasƒ±: $e');
      rethrow;
    }
  }

  Future<List<Menu>> fetchTableBill(int tableId) async {
    try {
      final response = await http.get(Uri.parse(
          '$baseUrl/bills/getbilldetailbytableid?id=$tableId')); //bu api sƒ±kƒ±ntƒ±lƒ± bazƒ± deƒüerleri null alƒ±yor (isAmount, isCredit, category, preptime)
      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        final billItems = data['data']?['billItems'] as List<dynamic>? ?? [];

        final List<Menu> currentBillItems = billItems.map((item) {
          final menuItem = Menu(
            id: item['id'] as int?,
            title: item['title'] as String?,
            price: item['price'] as double?,
            status: item['status'] as String?,
            category: item['category'] as String?,
            piece: _parseToInt(item['piece']) ?? 1,
            isCredit: item['isCredit'] as bool?,
            isAmount: item['isAmount'] as bool?,
            billId: item['billId'] as int?,
            preparationTime: item['preparationTime'] != null ? DateTime.parse(item['preparationTime']) : null,
          );
          return menuItem;
        }).toList();
        return currentBillItems;
      } else {
        throw Exception(
            'Masa adisyonu √ßekerken hata olu≈ütu: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Masa adisyonu √ßekerken hata olu≈ütu: $e');
    }
  }

  Future<Menu> addItemToBill(Menu item, [List<Menu>? existingBillItems, bool isMerging = false]) async {
    try {
      // Try to get billId from existing items first
      int? billId;
      if (existingBillItems != null && existingBillItems.isNotEmpty) {
        billId = existingBillItems.first.billId;
      }
      
      // If no existing billId found, create new one
      billId ??= await _getOrCreateBillId(item.tableId!);

      // Add item to bill
      final requestBody = {
        "category": item.category,
        "isAmount": item.isAmount ?? false,
        "isCredit": item.isCredit ?? false,
        "piece": item.piece ?? 1,
        "preparationTime": item.createdAt?.toIso8601String() ?? DateTime.now().toIso8601String(),
        "price": item.price,
        "status": isMerging ? item.status : 'hazƒ±rlanƒ±yor',
        "title": item.title,
        "billId": billId,
      };

      final itemResponse = await http.post(
        Uri.parse('$baseUrl/billitems/add'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(requestBody),
      );

      if (itemResponse.statusCode != 200) {
        throw Exception('√úr√ºn adisyona eklenemedi');
      }

      final addedItemData = jsonDecode(itemResponse.body)['data'];
      return Menu(
        id: addedItemData['id'],
        title: addedItemData['title'],
        price: addedItemData['price']?.toDouble(),
        status: addedItemData['status'],
        category: addedItemData['category'],
        piece: _parseToInt(addedItemData['piece']) ?? 1,
        isCredit: addedItemData['isCredit'] ?? item.isCredit ?? false,
        isAmount: addedItemData['isAmount'] ?? item.isAmount ?? false,
        tableId: item.tableId,
        billId: billId,
        preparationTime: addedItemData['preparationTime'] != null ? DateTime.parse(addedItemData['preparationTime']) : DateTime.now(),
      );
    } catch (e) {
      throw Exception('√úr√ºn adisyona eklenirken hata olu≈ütu: $e');
    }
  }

  Future<int> _getOrCreateBillId(int tableId) async {
    print('üîç Masa #$tableId i√ßin mevcut adisyon aranƒ±yor...');
    final response =
        await http.get(Uri.parse('$baseUrl/bills/getbilldetailbytableid?id=$tableId'));
    final responseData = jsonDecode(response.body);
    if (response.statusCode == 200 &&
        responseData['data']?['billDetail'] != null) {
      final billId = responseData['data']['billDetail']['id'];
      print('‚úÖ Mevcut adisyon bulundu - Adisyon ID: $billId');
      return billId;
    }

    print('üìù Mevcut adisyon bulunamadƒ±, yeni adisyon olu≈üturuluyor...');
    final businessId = await _authService.getValidatedBusinessId();

    final billResponse = await http.post(
      Uri.parse('$baseUrl/bills/add'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'businessId': businessId,
        'tableId': tableId,
      }),
    );

    if (billResponse.statusCode != 200) {
      print('‚ùå Hata: Yeni adisyon olu≈üturulamadƒ± (Status: ${billResponse.statusCode})');
      throw Exception('Yeni adisyon olu≈üturulamadƒ±');
    }

    final newBillId = jsonDecode(billResponse.body)['data']['id'];
    print('üéâ Yeni adisyon olu≈üturuldu - Adisyon ID: $newBillId');
    return newBillId;
  }

  Future<int> getOrCreateBillId(int tableId) async {
    return _getOrCreateBillId(tableId);
  }

  /// Helper method to safely parse values to int
  static int? _parseToInt(dynamic value) {
    if (value is int) {
      return value;
    } else if (value is String) {
      return int.tryParse(value);
    } else {
      return null;
    }
  }

  Future<void> addToPastBillItems(Menu item) async {
    try {
      final businessId = await _authService.getValidatedBusinessId();

      final url = Uri.parse('$baseUrl/PastBillItems/add');
      final body = jsonEncode({
        'category': item.category,
        'isAmount': item.isAmount ?? false,
        'isCredit': item.isCredit,
        'piece': item.piece ?? 1,
        'preparationTime': DateTime.now().toIso8601String(),
        'price': item.price,
        'title': item.title,
        'businessId': businessId
      });

      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: body,
      );

      if (response.statusCode != 200) {
        throw Exception(
            'Ge√ßmi≈ü adisyon kalemlerine eklenirken hata olu≈ütu: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Ge√ßmi≈ü adisyon kalemlerine eklenirken hata olu≈ütu: $e');
    }
  }

  Future<bool> closeBill(int tableId) async {
    try {
      print('üîÑ Masa #$tableId i√ßin adisyon kapatma i≈ülemi ba≈ülatƒ±ldƒ±');
      
      // 1. Get current bill items
      final currentBill = await fetchTableBill(tableId);
      print('üìã Mevcut adisyon kalemleri getirildi: ${currentBill.length} adet √ºr√ºn');

      if (currentBill.isEmpty) {
        print('‚ö†Ô∏è Adisyonda √ºr√ºn bulunmadƒ±ƒüƒ± i√ßin i≈ülem iptal edildi');
        return false;
      }

      final billId = currentBill.first.billId;
      print('üîë Bill ID: $billId');

      // 2. Add each item to past bill items in parallel
      print('üì• √úr√ºnler ge√ßmi≈ü adisyon kalemlerine aktarƒ±lƒ±yor...');
      await Future.wait(
        currentBill.map((item) async {
          await addToPastBillItems(item);
          print('‚úÖ "${item.title}" ge√ßmi≈ü kayƒ±tlara eklendi');
        }),
      );

      // 3. Delete each bill item in parallel
      print('üóëÔ∏è Mevcut adisyon kalemleri siliniyor...');
      final deleteItemFutures = currentBill.where((item) => item.id != null).map((item) async {
        final deleteItemResponse = await http.post(
          Uri.parse('$baseUrl/BillItems/deletebyid?id=${item.id}'),
          headers: {'Content-Type': 'application/json'},
        );

        if (deleteItemResponse.statusCode != 200) {
          throw Exception('Bill item silinemedi: ${item.id}');
        }
        print('‚úÖ "${item.title}" adisyondan silindi');
      });
      
      await Future.wait(deleteItemFutures);

      // 4. Delete the bill itself
      if (billId != null) {
        print('üóëÔ∏è Ana adisyon siliniyor (ID: $billId)...');
        final deleteBillResponse = await http.post(
          Uri.parse('$baseUrl/bills/deletebyid?id=$billId'),
        );

        if (deleteBillResponse.statusCode != 200) {
          throw Exception('Bill silinemedi');
        }
        print('‚úÖ Ana adisyon ba≈üarƒ±yla silindi');
      } else {
        throw Exception('Bill ID bulunamadƒ±');
      }

      print('‚ú® Masa #$tableId i√ßin adisyon kapatma i≈ülemi ba≈üarƒ±yla tamamlandƒ±');
      return true;
    } catch (e) {
      print('‚ùå HATA: Adisyon kapatƒ±lƒ±rken bir sorun olu≈ütu:');
      print('‚ùå $e');
      return false;
    }
  }

  Future<void> updateBillItemStatus(Menu item) async {
    try {
      // Tutar bazlƒ± √∂demeler i√ßin id null ise add endpoint'ini kullan
      // Normal √ºr√ºnler veya id'si olan tutar bazlƒ± √∂demeler i√ßin update endpoint'ini kullan
      final endpoint = (item.isAmount == true && item.id == null)
          ? 'billitems/add'
          : 'BillItems/update';
      final url = Uri.parse('$baseUrl/$endpoint');

      final Map<String, dynamic> requestBody;
      if (item.isAmount == true && item.id == null) {
        requestBody = {
          'category': item.category ?? 'Genel',
          'isAmount': item.isAmount,
          'isCredit': item.isCredit,
          'piece': item.piece ?? 1,
          'preparationTime': DateTime.now().toIso8601String(),
          'price': item.price,
          'status': item.status,
          'title': item.title,
          'billId': item.billId
        };
      } else {
        requestBody = {
          'id': item.id,
          'category': item.category ?? 'Genel',
          'isAmount': item.isAmount,
          'isCredit': item.isCredit,
          'piece': item.piece ?? 1,
          'preparationTime': DateTime.now().toIso8601String(),
          'price': item.price,
          'status': item.status,
          'title': item.title,
          'billId': item.billId
        };
      }

      final body = jsonEncode(requestBody);

      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: body,
      );

      if (response.statusCode != 200) {
        throw Exception(
            '√úr√ºn durumu g√ºncellenirken hata olu≈ütu: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('√úr√ºn durumu g√ºncellenirken hata olu≈ütu: $e');
    }
  }

  Future<int?> getTableIdByTitle(String tableTitle) async {
    try {
      final tables = await fetchTables();
      final table = tables.firstWhere(
        (table) => table.tableTitle == tableTitle,
        orElse: () => throw Exception('Masa bulunamadƒ±: $tableTitle'),
      );
      return table.id;
    } catch (e) {
      print('Masa ID bulunamadƒ±: $e');
      return null;
    }
  }

  Future<bool> deleteBill(int id) async {
    try {
      print('üóëÔ∏è Adisyon siliniyor (ID: $id)...');
      final response = await http.post(
        Uri.parse('$baseUrl/bills/deletebyid?id=$id'),
        headers: {'accept': '*/*'},
      );

      if (response.statusCode != 200) {
        print('‚ùå Adisyon silinemedi (Status: ${response.statusCode})');
        return false;
      }

      print('‚úÖ Adisyon ba≈üarƒ±yla silindi');
      return true;
    } catch (e) {
      print('‚ùå HATA: Adisyon silinirken bir sorun olu≈ütu:');
      print('‚ùå $e');
      return false;
    }
  }

  Future<bool> deleteTable(int tableId) async {
    try {
      print('üóëÔ∏è Masa siliniyor (ID: $tableId)...');
      final response = await http.post(
        Uri.parse('$baseUrl/Tables/deletebyid?id=$tableId'),
        headers: {'accept': '*/*'},
      );

      if (response.statusCode != 200) {
        print('‚ùå Masa silinemedi (Status: ${response.statusCode})');
        return false;
      }

      print('‚úÖ Masa ba≈üarƒ±yla silindi');
      return true;
    } catch (e) {
      print('‚ùå HATA: Masa silinirken bir sorun olu≈ütu:');
      print('‚ùå $e');
      return false;
    }
  }

  Future<bool> mergeTables(int sourceTableId, int targetTableId) async {
    try {
      print('üîÑ Masalar birle≈ütiriliyor...');
      print('üì§ Kaynak masa: #$sourceTableId');
      print('üì• Hedef masa: #$targetTableId');

      // 1. Kaynak masanƒ±n adisyonunu al
      final sourceBillItems = await fetchTableBill(sourceTableId);
      if (sourceBillItems.isEmpty) {
        print('‚ö†Ô∏è Kaynak masada adisyon bulunamadƒ±');
        return false;
      }

      // 2. Hedef masanƒ±n adisyon ID'sini al veya yeni adisyon olu≈ütur
      final targetBillId = await _getOrCreateBillId(targetTableId);
      print('üéØ Hedef masa adisyon ID: $targetBillId');

      // 3. Kaynak masadaki her √ºr√ºn√º hedef masaya aktar
      print('üì¶ √úr√ºnler aktarƒ±lƒ±yor...');
      for (final item in sourceBillItems) {
        final newItem = Menu(
          title: item.title,
          price: item.price,
          status: item.status,
          category: item.category,
          piece: item.piece,
          isCredit: item.isCredit,
          isAmount: item.isAmount,
          tableId: targetTableId,
          billId: targetBillId,
        );
        await addItemToBill(newItem, null, true);
        print('‚úÖ "${item.title}" aktarƒ±ldƒ±');
      }

      // 4. Kaynak masanƒ±n adisyonunu sil
      final sourceBillId = sourceBillItems.first.billId;
      if (sourceBillId != null) {
        print('üóëÔ∏è Kaynak masa adisyonu siliniyor...');
        await deleteBill(sourceBillId);
      }

      print('‚ú® Masalar ba≈üarƒ±yla birle≈ütirildi');
      return true;
    } catch (e) {
      print('‚ùå HATA: Masalar birle≈ütirilirken bir sorun olu≈ütu:');
      print('‚ùå $e');
      return false;
    }
  }

  Future<UpdateAreaResult> updateArea({required Area area, required String newAreaName, required Function(String) generateQRCode}) async {
    try {
      final businessId = await _authService.getValidatedBusinessId();
      print('üîÑ Alan adƒ± g√ºncelleniyor: ${area.title} -> $newAreaName');
      
      // 1. √ñnce mevcut masalarƒ± getir
      final tables = await fetchTables();
      final tablesToUpdate = tables.where((table) => table.area == area.title).toList();
      print('üìã G√ºncellenecek masa sayƒ±sƒ±: ${tablesToUpdate.length}');
      
      final updatedTables = <CoffeTable>[];
      
      // 2. Her bir masayƒ± g√ºncelle
      for (final table in tablesToUpdate) {
        print('üîÑ Masa g√ºncelleniyor: ${table.tableTitle}');
        
        // Yeni masa ba≈ülƒ±ƒüƒ±nƒ± olu≈ütur
        final tableNumber = table.tableTitle?.split(' ').last; // "Salon 1"den "1"i al
        final newTableTitle = '$newAreaName $tableNumber';
        
        // Table ID'yi kullanarak QR code olu≈ütur
        final newQrUrl = await generateQRCode(table.id.toString());
        
        final response = await http.post(
          Uri.parse('$baseUrl/Tables/update'),
          headers: {
            'Content-Type': 'application/json',
            'accept': '*/*',
          },
          body: json.encode({
            'id': table.id,
            'area': newAreaName,
            'tableTitle': newTableTitle,
            'businessId': businessId,
            'qrUrl': newQrUrl
          }),
        );

        if (response.statusCode != 200) {
          print('‚ùå Masa g√ºncellenemedi: ${table.tableTitle}');
          throw Exception('Masa g√ºncellenirken hata olu≈ütu: ${response.statusCode}');
        }
        
        final responseData = json.decode(response.body);
        final updatedTable = CoffeTable.fromJson(responseData['data']);
        updatedTables.add(updatedTable);
        print('‚úÖ Masa g√ºncellendi: $newTableTitle');
      }

      // 3. Alanƒ± g√ºncelle
      print('üîÑ Alan g√ºncelleniyor... (ID: ${area.id})');
      final response = await http.post(
        Uri.parse('$baseUrl/Areas/update'),
        headers: {
          'Content-Type': 'application/json',
          'accept': '*/*',
        },
        body: json.encode({
          'id': area.id,
          'title': newAreaName,
          'businessId': businessId
        }),
      );

      if (response.statusCode == 200) {
        print('‚úÖ Alan ba≈üarƒ±yla g√ºncellendi');
        final responseData = json.decode(response.body);
        final updatedArea = Area.fromJson(responseData['data']);
        
        return UpdateAreaResult(
          success: true,
          data: updatedArea,
          updatedTables: updatedTables,
        );
      } else {
        throw Exception('Alan adƒ± g√ºncellenirken hata olu≈ütu: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå HATA: Alan adƒ± g√ºncellenirken bir sorun olu≈ütu:');
      print('‚ùå $e');
      return UpdateAreaResult(success: false);
    }
  }
}
